1) Hard --> Vertical Order Traversal of a Binary Tree
    class Solution {
        // N -> dfs
        // logN --> treeMap insertion
        // TC : O(N * logN)
        //       col          level
        TreeMap<Integer, TreeMap<Integer, ArrayList<Integer>>> map = new TreeMap<>();

        public void dfs (TreeNode root, int col, int level) {
            if (root == null) {
                return;
            }
            // insert in map
            // col
            if (!map.containsKey(col)) {
                map.put(col, new TreeMap<>());
            }

            // level
            if (!map.get(col).containsKey(level)) {
                map.get(col).put(level, new ArrayList<>());
            }

            // insertion
            map.get(col).get(level).add(root.val);
            dfs(root.left, col - 1, level + 1);
            dfs(root.right, col + 1, level + 1);
        }

        public List<List<Integer>> verticalTraversal(TreeNode root) {
            List<List<Integer>> res = new ArrayList<>();
            if (root == null) {
                return res;
            }

            dfs (root, 0, 0); // dfs call to fill up the map

            // col wise sorting
            for (Map.Entry<Integer, TreeMap<Integer, ArrayList<Integer>>> entry : map.entrySet()) {
                TreeMap<Integer, ArrayList<Integer>> levelMap = entry.getValue();
                ArrayList<Integer> list = new ArrayList<>();
                // level wise sorting
                for (Map.Entry<Integer, ArrayList<Integer>> subEntry : levelMap.entrySet()) {
                    ArrayList<Integer> subList = subEntry.getValue();
                    Collections.sort(subList);
                    list.addAll(subList);
                }
                res.add(list);
            }
            return res;
        }
    }

2) left and right side view
// right side
    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     *     int val;
     *     TreeNode left;
     *     TreeNode right;
     *     TreeNode() {}
     *     TreeNode(int val) { this.val = val; }
     *     TreeNode(int val, TreeNode left, TreeNode right) {
     *         this.val = val;
     *         this.left = left;
     *         this.right = right;
     *     }
     * }
     */
    class Solution {
        public List<Integer> rightSideView(TreeNode root) {
            List<Integer> res = new ArrayList<>();
            if (root == null) {
                return res;
            }

            Queue<TreeNode> queue = new LinkedList<>();
            queue.offer (root);

            while (!queue.isEmpty()) {
                int size = queue.size();
                for (int i = 0; i < size; i++) {
                    TreeNode node = queue.poll();
                    if (i == size - 1) {
                        res.add(node.val);
                    }
                    if (node.left != null) {
                        queue.offer (node.left);
                    }
                    if (node.right != null) {
                        queue.offer (node.right);
                    }
                }
            }
            return res;
        }
    }
// left side
    class Solution {
        public List<Integer> leftSideView(TreeNode root) {
            List<Integer> res = new ArrayList<>();
            if (root == null) {
                return res;
            }

            Queue<TreeNode> queue = new LinkedList<>();
            queue.offer (root);

            while (!queue.isEmpty()) {
                int size = queue.size();
                for (int i = 0; i < size; i++) {
                    if (i == 0) {
                        res.add(node.val);
                    }
                    TreeNode node = queue.poll();
                    if (node.left != null) {
                        queue.offer (node.left);
                    }
                    if (node.right != null) {
                        queue.offer (node.right);
                    }
                }
            }
            return res;
        }
    }

3) top and bottom view
// top
    class Solution {
        // Function to return a list of nodes visible from the top view
        // from left to right in Binary Tree.
        static class CustomNode {
            Node node;
            int col;

            CustomNode (Node node, int col) {
                this.node = node;
                this.col = col;
            }
        }
        static ArrayList<Integer> topView(Node root) {
            // add your code
            ArrayList<Integer> res = new ArrayList<>();
            if (root == null) {
                return res;
            }
            Queue<CustomNode> queue = new LinkedList<>();
            //        col     value
            TreeMap<Integer, Integer> map = new TreeMap<>();
            queue.offer(new CustomNode(root, 0));

            while (!queue.isEmpty()) {
                CustomNode customNode = queue.poll();
                Node node = customNode.node;
                int col = customNode.col;
                if (!map.containsKey(col)) {
                    map.put(col, node.data);
                }
                // left child --> col = col - 1
                if (node.left != null) {
                    queue.offer (new CustomNode (node.left, col - 1));
                }
                // right child --> col = col + 1
                if (node.right != null) {
                    queue.offer (new CustomNode (node.right, col + 1));
                }
            }
            for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
                res.add(entry.getValue());
            }
            return res;
        }
    }
// bottom
    class Solution {
        // Function to return a list of nodes visible from the top view
        // from left to right in Binary Tree.
        static class CustomNode {
            Node node;
            int col;

            CustomNode (Node node, int col) {
                this.node = node;
                this.col = col;
            }
        }
        static ArrayList<Integer> topView(Node root) {
            // add your code
            ArrayList<Integer> res = new ArrayList<>();
            if (root == null) {
                return res;
            }
            Queue<CustomNode> queue = new LinkedList<>();
            //        col     value
            TreeMap<Integer, Integer> map = new TreeMap<>();
            queue.offer(new CustomNode(root, 0));

            while (!queue.isEmpty()) {
                CustomNode customNode = queue.poll();
                Node node = customNode.node;
                int col = customNode.col;
                //if (!map.containsKey(col)) {
                    map.put(col, node.data);
                //}
                // left child --> col = col - 1
                if (node.left != null) {
                    queue.offer (new CustomNode (node.left, col - 1));
                }
                // right child --> col = col + 1
                if (node.right != null) {
                    queue.offer (new CustomNode (node.right, col + 1));
                }
            }
            for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
                res.add(entry.getValue());
            }
            return res;
        }
    }